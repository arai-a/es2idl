/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This file is generated by es2idl.py */

// ECMAScriptÂ® Language Specification
// https://tc39.es/ecma262/

// Proxy Object Internal Methods and Internal Slots
// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots
dictionary ProxyHandler {
  optional getPrototypeOfCallback getPrototypeOf;
  optional setPrototypeOfCallback setPrototypeOf;
  optional isExtensibleCallback isExtensible;
  optional preventExtensionsCallback preventExtensions;
  optional getOwnPropertyDescriptorCallback getOwnPropertyDescriptor;
  optional definePropertyCallback defineProperty;
  optional hasCallback has;
  optional getCallback get;
  optional setCallback set;
  optional deletePropertyCallback deleteProperty;
  optional ownKeysCallback ownKeys;
  optional applyCallback apply;
  optional constructCallback construct;
};

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof
callback getPrototypeOfCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v
callback setPrototypeOfCallback = any (any target, any V);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-isextensible
callback isExtensibleCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-preventextensions
callback preventExtensionsCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p
callback getOwnPropertyDescriptorCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc
callback definePropertyCallback = any (any target, any P, any descObj);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p
callback hasCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver
callback getCallback = any (any target, any P, any Receiver);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver
callback setCallback = any (any target, any P, any V, any Receiver);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-delete-p
callback deletePropertyCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys
callback ownKeysCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist
callback applyCallback = any (any target, any thisArgument, any argArray);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget
callback constructCallback = any (any target, any argArray, any newTarget);

// The %ForInIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%foriniteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace ForInIteratorPrototype {
  [NonEnumerable]
  any next();
};

// The Global Object
// https://tc39.es/ecma262/#sec-global-object
[Global=Global, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Global {
  [DataProperty, NonEnumerable, Configurable, Value="GlobalThisValue"]
  attribute any globalThis;
  [Name="Infinity", DataProperty, NonEnumerable, NonConfigurable, NumberValue="Infinity"]
  attribute any _Infinity;
  [Name="NaN", DataProperty, NonEnumerable, NonConfigurable, NumberValue="NaN"]
  attribute any _NaN;
  [Name="undefined", DataProperty, NonEnumerable, NonConfigurable, Value="undefined"]
  attribute any _undefined;

  [NonEnumerable]
  any eval(any x);
  [NonEnumerable]
  any isFinite(any number);
  [NonEnumerable]
  any isNaN(any number);
  [NonEnumerable, Alias="Number.parseFloat"]
  any parseFloat(any string);
  [NonEnumerable, Alias="Number.parseInt"]
  any parseInt(any string, any radix);
  [NonEnumerable]
  any decodeURI(any encodedURI);
  [NonEnumerable]
  any decodeURIComponent(any encodedURIComponent);
  [NonEnumerable]
  any encodeURI(any uri);
  [NonEnumerable]
  any encodeURIComponent(any uriComponent);
  [NonEnumerable]
  any escape(any string);
  [NonEnumerable]
  any unescape(any string);
};

// Object Objects
// https://tc39.es/ecma262/#sec-object-objects
[Exposed=*, PrototypeSlot=null, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Object {
  [Length="1"]
  constructor(optional any value);

  [NonEnumerable, Length="2"]
  static any assign(any target, any... sources);
  [NonEnumerable]
  static any create(any O, any Properties);
  [NonEnumerable]
  static any defineProperties(any O, any Properties);
  [NonEnumerable]
  static any defineProperty(any O, any P, any Attributes);
  [NonEnumerable]
  static any entries(any O);
  [NonEnumerable]
  static any freeze(any O);
  [NonEnumerable]
  static any fromEntries(any iterable);
  [NonEnumerable]
  static any getOwnPropertyDescriptor(any O, any P);
  [NonEnumerable]
  static any getOwnPropertyDescriptors(any O);
  [NonEnumerable]
  static any getOwnPropertyNames(any O);
  [NonEnumerable]
  static any getOwnPropertySymbols(any O);
  [NonEnumerable]
  static any getPrototypeOf(any O);
  [NonEnumerable]
  static any groupBy(any items, any callback);
  [NonEnumerable]
  static any hasOwn(any O, any P);
  [NonEnumerable]
  static any is(any value1, any value2);
  [NonEnumerable]
  static any isExtensible(any O);
  [NonEnumerable]
  static any isFrozen(any O);
  [NonEnumerable]
  static any isSealed(any O);
  [NonEnumerable]
  static any keys(any O);
  [NonEnumerable]
  static any preventExtensions(any O);
  [NonEnumerable]
  static any seal(any O);
  [NonEnumerable]
  static any setPrototypeOf(any O, any proto);
  [NonEnumerable]
  static any values(any O);

  [Name="__proto__", NonEnumerable]
  attribute any _proto;

  [NonEnumerable]
  any hasOwnProperty(any V);
  [NonEnumerable]
  any isPrototypeOf(any V);
  [NonEnumerable]
  any propertyIsEnumerable(any V);
  [NonEnumerable]
  any toLocaleString(optional any reserved1, optional any reserved2);
  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any valueOf();
  [Name="__defineGetter__", NonEnumerable]
  any _defineGetter(any P, any getter);
  [Name="__defineSetter__", NonEnumerable]
  any _defineSetter(any P, any setter);
  [Name="__lookupGetter__", NonEnumerable]
  any _lookupGetter(any P);
  [Name="__lookupSetter__", NonEnumerable]
  any _lookupSetter(any P);
};

// Function Objects
// https://tc39.es/ecma262/#sec-function-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Function {
  [Length="1"]
  constructor(any... parameterArgs /* , any bodyArg */);

  [NonEnumerable]
  any apply(any thisArg, any argArray);
  [NonEnumerable]
  any bind(any thisArg, any... args);
  [NonEnumerable]
  any call(any thisArg, any... args);
  [Name="toString", NonEnumerable]
  any _toString();
  [Name="Symbol.hasInstance", ReadOnly, NonEnumerable, NonConfigurable]
  any _symbol_hasInstance(any V);

  [DataProperty, NonEnumerable, Configurable, NumberValue="0"]
  attribute any length;
  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any name;

  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any length;
  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any name;
  [Instance, Name="prototype", DataProperty, NonEnumerable, NonConfigurable]
  attribute any _prototype;
};

// Boolean Objects
// https://tc39.es/ecma262/#sec-boolean-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Boolean {
  constructor(any value);

  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any valueOf();
};

// Symbol Objects
// https://tc39.es/ecma262/#sec-symbol-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Symbol {
  constructor(optional any description);

  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.asyncIterator"]
  static attribute any asyncIterator;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.hasInstance"]
  static attribute any hasInstance;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.isConcatSpreadable"]
  static attribute any isConcatSpreadable;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.iterator"]
  static attribute any iterator;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.match"]
  static attribute any match;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.matchAll"]
  static attribute any matchAll;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.replace"]
  static attribute any replace;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.search"]
  static attribute any search;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.species"]
  static attribute any species;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.split"]
  static attribute any split;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.toPrimitive"]
  static attribute any toPrimitive;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.toStringTag"]
  static attribute any toStringTag;
  [DataProperty, NonEnumerable, NonConfigurable, SymbolValue="Symbol.unscopables"]
  static attribute any unscopables;

  [NonEnumerable]
  static any for(any key);
  [NonEnumerable]
  static any keyFor(any sym);

  [NonEnumerable]
  readonly attribute any description;

  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any valueOf();
  [Name="Symbol.toPrimitive", ReadOnly, NonEnumerable]
  any _symbol_toPrimitive(any hint);
};

// Error Objects
// https://tc39.es/ecma262/#sec-error-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Error {
  constructor(any message, optional any options);

  [Name="toString", NonEnumerable]
  any _toString();

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="Error"]
  attribute any name;
};

// EvalError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-evalerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface EvalError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="EvalError"]
  attribute any name;
};

// RangeError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RangeError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="RangeError"]
  attribute any name;
};

// ReferenceError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-referenceerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ReferenceError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="ReferenceError"]
  attribute any name;
};

// SyntaxError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-syntaxerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface SyntaxError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="SyntaxError"]
  attribute any name;
};

// TypeError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface TypeError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="TypeError"]
  attribute any name;
};

// URIError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-urierror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface URIError : Error {
  constructor(any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue="NativeError"]
  static attribute any name;

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="URIError"]
  attribute any name;
};

// AggregateError Objects
// https://tc39.es/ecma262/#sec-aggregate-error-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AggregateError : Error {
  constructor(any errors, any message, optional any options);

  [DataProperty, NonEnumerable, Configurable, StringValue=""]
  attribute any message;
  [DataProperty, NonEnumerable, Configurable, StringValue="AggregateError"]
  attribute any name;
};

// Number Objects
// https://tc39.es/ecma262/#sec-number-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Number {
  constructor(any value);

  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="EPSILON"]
  static attribute any EPSILON;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="9007199254740991"]
  static attribute any MAX_SAFE_INTEGER;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="MAX_VALUE"]
  static attribute any MAX_VALUE;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="-9007199254740991"]
  static attribute any MIN_SAFE_INTEGER;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="MIN_VALUE"]
  static attribute any MIN_VALUE;
  [Name="NaN", DataProperty, NonEnumerable, NonConfigurable, NumberValue="NaN"]
  static attribute any _NaN;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="-Infinity"]
  static attribute any NEGATIVE_INFINITY;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="Infinity"]
  static attribute any POSITIVE_INFINITY;

  [NonEnumerable]
  static any isFinite(any number);
  [NonEnumerable]
  static any isInteger(any number);
  [NonEnumerable]
  static any isNaN(any number);
  [NonEnumerable]
  static any isSafeInteger(any number);
  // "parseFloat" property is aliased from "Global.parseFloat".
  // "parseInt" property is aliased from "Global.parseInt".

  [NonEnumerable]
  any toExponential(any fractionDigits);
  [NonEnumerable]
  any toFixed(any fractionDigits);
  [NonEnumerable]
  any toPrecision(any precision);
  [Name="toString", NonEnumerable, Length="1"]
  any _toString(optional any radix);
  [NonEnumerable]
  any valueOf();
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Number {
  [NonEnumerable]
  any toLocaleString(optional any locales, optional any options);
};

// BigInt Objects
// https://tc39.es/ecma262/#sec-bigint-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigInt {
  constructor(any value);

  [NonEnumerable]
  static any asIntN(any bits, any bigint);
  [NonEnumerable]
  static any asUintN(any bits, any bigint);

  [Name="toString", NonEnumerable]
  any _toString(optional any radix);
  [NonEnumerable]
  any valueOf();
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface BigInt {
  [NonEnumerable]
  any toLocaleString(optional any locales, optional any options);
};

// The Math Object
// https://tc39.es/ecma262/#sec-math-object
[Exposed=*]
namespace Math {
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="E"]
  attribute any E;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="LN10"]
  attribute any LN10;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="LN2"]
  attribute any LN2;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="LOG10E"]
  attribute any LOG10E;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="LOG2E"]
  attribute any LOG2E;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="PI"]
  attribute any PI;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="SQRT1_2"]
  attribute any SQRT1_2;
  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="SQRT2"]
  attribute any SQRT2;

  [NonEnumerable]
  any abs(any x);
  [NonEnumerable]
  any acos(any x);
  [NonEnumerable]
  any acosh(any x);
  [NonEnumerable]
  any asin(any x);
  [NonEnumerable]
  any asinh(any x);
  [NonEnumerable]
  any atan(any x);
  [NonEnumerable]
  any atanh(any x);
  [NonEnumerable]
  any atan2(any y, any x);
  [NonEnumerable]
  any cbrt(any x);
  [NonEnumerable]
  any ceil(any x);
  [NonEnumerable]
  any clz32(any x);
  [NonEnumerable]
  any cos(any x);
  [NonEnumerable]
  any cosh(any x);
  [NonEnumerable]
  any exp(any x);
  [NonEnumerable]
  any expm1(any x);
  [NonEnumerable]
  any floor(any x);
  [NonEnumerable]
  any fround(any x);
  [NonEnumerable]
  any f16round(any x);
  [NonEnumerable, Length="2"]
  any hypot(any... args);
  [NonEnumerable]
  any imul(any x, any y);
  [NonEnumerable]
  any log(any x);
  [NonEnumerable]
  any log1p(any x);
  [NonEnumerable]
  any log10(any x);
  [NonEnumerable]
  any log2(any x);
  [NonEnumerable, Length="2"]
  any max(any... args);
  [NonEnumerable, Length="2"]
  any min(any... args);
  [NonEnumerable]
  any pow(any base, any exponent);
  [NonEnumerable]
  any random();
  [NonEnumerable]
  any round(any x);
  [NonEnumerable]
  any sign(any x);
  [NonEnumerable]
  any sin(any x);
  [NonEnumerable]
  any sinh(any x);
  [NonEnumerable]
  any sqrt(any x);
  [NonEnumerable]
  any tan(any x);
  [NonEnumerable]
  any tanh(any x);
  [NonEnumerable]
  any trunc(any x);
};

// Date Objects
// https://tc39.es/ecma262/#sec-date-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Date {
  [Length="7"]
  constructor(any... values);

  [NonEnumerable]
  static any now();
  [NonEnumerable]
  static any parse(any string);
  [NonEnumerable, Length="7"]
  static any UTC(any year, optional any month, optional any date, optional any hours, optional any minutes, optional any seconds, optional any ms);

  [NonEnumerable]
  any getDate();
  [NonEnumerable]
  any getDay();
  [NonEnumerable]
  any getFullYear();
  [NonEnumerable]
  any getHours();
  [NonEnumerable]
  any getMilliseconds();
  [NonEnumerable]
  any getMinutes();
  [NonEnumerable]
  any getMonth();
  [NonEnumerable]
  any getSeconds();
  [NonEnumerable]
  any getTime();
  [NonEnumerable]
  any getTimezoneOffset();
  [NonEnumerable]
  any getUTCDate();
  [NonEnumerable]
  any getUTCDay();
  [NonEnumerable]
  any getUTCFullYear();
  [NonEnumerable]
  any getUTCHours();
  [NonEnumerable]
  any getUTCMilliseconds();
  [NonEnumerable]
  any getUTCMinutes();
  [NonEnumerable]
  any getUTCMonth();
  [NonEnumerable]
  any getUTCSeconds();
  [NonEnumerable]
  any setDate(any date);
  [NonEnumerable, Length="3"]
  any setFullYear(any year, optional any month, optional any date);
  [NonEnumerable, Length="4"]
  any setHours(any hour, optional any min, optional any sec, optional any ms);
  [NonEnumerable]
  any setMilliseconds(any ms);
  [NonEnumerable, Length="3"]
  any setMinutes(any min, optional any sec, optional any ms);
  [NonEnumerable, Length="2"]
  any setMonth(any month, optional any date);
  [NonEnumerable, Length="2"]
  any setSeconds(any sec, optional any ms);
  [NonEnumerable]
  any setTime(any time);
  [NonEnumerable]
  any setUTCDate(any date);
  [NonEnumerable, Length="3"]
  any setUTCFullYear(any year, optional any month, optional any date);
  [NonEnumerable, Length="4"]
  any setUTCHours(any hour, optional any min, optional any sec, optional any ms);
  [NonEnumerable]
  any setUTCMilliseconds(any ms);
  [NonEnumerable, Length="3"]
  any setUTCMinutes(any min, optional any sec, optional any ms);
  [NonEnumerable, Length="2"]
  any setUTCMonth(any month, optional any date);
  [NonEnumerable, Length="2"]
  any setUTCSeconds(any sec, optional any ms);
  [NonEnumerable]
  any toDateString();
  [NonEnumerable]
  any toISOString();
  [Name="toJSON", NonEnumerable]
  any _toJSON(any key);
  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any toTimeString();
  [NonEnumerable, Alias="toGMTString"]
  any toUTCString();
  [NonEnumerable]
  any valueOf();
  [Name="Symbol.toPrimitive", ReadOnly, NonEnumerable]
  any _symbol_toPrimitive(any hint);
  [NonEnumerable]
  any getYear();
  [NonEnumerable]
  any setYear(any year);
  // "toGMTString" property is aliased from "toUTCString".
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Date {
  [NonEnumerable]
  any toLocaleDateString(optional any locales, optional any options);
  [NonEnumerable]
  any toLocaleString(optional any locales, optional any options);
  [NonEnumerable]
  any toLocaleTimeString(optional any locales, optional any options);
};

// String Objects
// https://tc39.es/ecma262/#sec-string-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface String {
  constructor(any value);

  [NonEnumerable, Length="1"]
  static any fromCharCode(any... codeUnits);
  [NonEnumerable, Length="1"]
  static any fromCodePoint(any... codePoints);
  [NonEnumerable]
  static any raw(any template, any... substitutions);

  [NonEnumerable]
  any at(any index);
  [NonEnumerable]
  any charAt(any pos);
  [NonEnumerable]
  any charCodeAt(any pos);
  [NonEnumerable]
  any codePointAt(any pos);
  [NonEnumerable, Length="1"]
  any concat(any... args);
  [NonEnumerable]
  any endsWith(any searchString, optional any endPosition);
  [Name="includes", NonEnumerable]
  any _includes(any searchString, optional any position);
  [NonEnumerable]
  any indexOf(any searchString, optional any position);
  [NonEnumerable]
  any isWellFormed();
  [NonEnumerable]
  any lastIndexOf(any searchString, optional any position);
  [NonEnumerable]
  any match(any regexp);
  [NonEnumerable]
  any matchAll(any regexp);
  [NonEnumerable]
  any normalize(optional any form);
  [NonEnumerable]
  any padEnd(any maxLength, optional any fillString);
  [NonEnumerable]
  any padStart(any maxLength, optional any fillString);
  [NonEnumerable]
  any repeat(any count);
  [NonEnumerable]
  any replace(any searchValue, any replaceValue);
  [NonEnumerable]
  any replaceAll(any searchValue, any replaceValue);
  [NonEnumerable]
  any search(any regexp);
  [NonEnumerable]
  any slice(any start, any end);
  [NonEnumerable]
  any split(any separator, any limit);
  [NonEnumerable]
  any startsWith(any searchString, optional any position);
  [NonEnumerable]
  any substring(any start, any end);
  [NonEnumerable]
  any toLowerCase();
  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any toUpperCase();
  [NonEnumerable]
  any toWellFormed();
  [NonEnumerable]
  any trim();
  [NonEnumerable, Alias="trimRight"]
  any trimEnd();
  [NonEnumerable, Alias="trimLeft"]
  any trimStart();
  [NonEnumerable]
  any valueOf();
  [Name="Symbol.iterator", NonEnumerable]
  any _symbol_iterator();
  [NonEnumerable]
  any substr(any start, any length);
  [NonEnumerable]
  any anchor(any name);
  [NonEnumerable]
  any big();
  [NonEnumerable]
  any blink();
  [NonEnumerable]
  any bold();
  [NonEnumerable]
  any fixed();
  [NonEnumerable]
  any fontcolor(any colour);
  [NonEnumerable]
  any fontsize(any size);
  [NonEnumerable]
  any italics();
  [NonEnumerable]
  any link(any url);
  [NonEnumerable]
  any small();
  [NonEnumerable]
  any strike();
  [NonEnumerable]
  any sub();
  [NonEnumerable]
  any sup();
  // "trimLeft" property is aliased from "trimStart".
  // "trimRight" property is aliased from "trimEnd".

  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="0"]
  attribute any length;

  [Instance, DataProperty, NonEnumerable, NonConfigurable]
  attribute any length;
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface String {
  [NonEnumerable, Length="1"]
  any localeCompare(any that, optional any locales, optional any options);
  [NonEnumerable]
  any toLocaleLowerCase(optional any locales);
  [NonEnumerable]
  any toLocaleUpperCase(optional any locales);
};

// The %StringIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace StringIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="String Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};

// RegExp (Regular Expression) Objects
// https://tc39.es/ecma262/#sec-regexp-regular-expression-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RegExp {
  constructor(any pattern, any flags);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any escape(any S);

  [NonEnumerable]
  readonly attribute any dotAll;
  [NonEnumerable]
  readonly attribute any flags;
  [NonEnumerable]
  readonly attribute any global;
  [NonEnumerable]
  readonly attribute any hasIndices;
  [NonEnumerable]
  readonly attribute any ignoreCase;
  [NonEnumerable]
  readonly attribute any multiline;
  [NonEnumerable]
  readonly attribute any source;
  [NonEnumerable]
  readonly attribute any sticky;
  [NonEnumerable]
  readonly attribute any unicode;
  [NonEnumerable]
  readonly attribute any unicodeSets;

  [NonEnumerable]
  any exec(any string);
  [Name="Symbol.match", NonEnumerable]
  any _symbol_match(any string);
  [Name="Symbol.matchAll", NonEnumerable]
  any _symbol_matchAll(any string);
  [Name="Symbol.replace", NonEnumerable]
  any _symbol_replace(any string, any replaceValue);
  [Name="Symbol.search", NonEnumerable]
  any _symbol_search(any string);
  [Name="Symbol.split", NonEnumerable]
  any _symbol_split(any string, any limit);
  [NonEnumerable]
  any test(any S);
  [Name="toString", NonEnumerable]
  any _toString();
  [NonEnumerable]
  any compile(any pattern, any flags);

  [Instance, DataProperty, NonEnumerable, NonConfigurable]
  attribute any lastIndex;
};

// The %RegExpStringIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace RegExpStringIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="RegExp String Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};

// Array Objects
// https://tc39.es/ecma262/#sec-array-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Array {
  [Length="1"]
  constructor(any... values);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any from(any items, optional any mapper, optional any thisArg);
  [NonEnumerable]
  static any isArray(any arg);
  [NonEnumerable]
  static any of(any... items);

  [NonEnumerable, Unscopable]
  any at(any index);
  [NonEnumerable, Length="1"]
  any concat(any... items);
  [NonEnumerable, Unscopable]
  any copyWithin(any target, any start, optional any end);
  [NonEnumerable, Unscopable]
  any entries();
  [NonEnumerable]
  any every(any callback, optional any thisArg);
  [NonEnumerable, Unscopable]
  any fill(any value, optional any start, optional any end);
  [NonEnumerable]
  any filter(any callback, optional any thisArg);
  [NonEnumerable, Unscopable]
  any find(any predicate, optional any thisArg);
  [NonEnumerable, Unscopable]
  any findIndex(any predicate, optional any thisArg);
  [NonEnumerable, Unscopable]
  any findLast(any predicate, optional any thisArg);
  [NonEnumerable, Unscopable]
  any findLastIndex(any predicate, optional any thisArg);
  [NonEnumerable, Unscopable]
  any flat(optional any depth);
  [NonEnumerable, Unscopable]
  any flatMap(any mapperFunction, optional any thisArg);
  [NonEnumerable]
  any forEach(any callback, optional any thisArg);
  [Name="includes", NonEnumerable, Unscopable]
  any _includes(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any indexOf(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any join(any separator);
  [NonEnumerable, Unscopable]
  any keys();
  [NonEnumerable]
  any lastIndexOf(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any map(any callback, optional any thisArg);
  [NonEnumerable]
  any pop();
  [NonEnumerable, Length="1"]
  any push(any... items);
  [NonEnumerable]
  any reduce(any callback, optional any initialValue);
  [NonEnumerable]
  any reduceRight(any callback, optional any initialValue);
  [NonEnumerable]
  any reverse();
  [NonEnumerable]
  any shift();
  [NonEnumerable]
  any slice(any start, any end);
  [NonEnumerable]
  any some(any callback, optional any thisArg);
  [NonEnumerable]
  any sort(any comparator);
  [NonEnumerable]
  any splice(any start, any deleteCount, any... items);
  [NonEnumerable, Unscopable]
  any toReversed();
  [NonEnumerable, Unscopable]
  any toSorted(any comparator);
  [NonEnumerable, Unscopable]
  any toSpliced(any start, any skipCount, any... items);
  [Name="toString", NonEnumerable, Alias="TypedArray.prototype.toString"]
  any _toString();
  [NonEnumerable, Length="1"]
  any unshift(any... items);
  [NonEnumerable, Alias="Symbol.iterator", Unscopable]
  any values();
  [NonEnumerable]
  any with(any index, any value);
  // "Symbol.iterator" property is aliased from "values".

  [DataProperty, NonEnumerable, NonConfigurable, NumberValue="0"]
  attribute any length;

  [Instance, DataProperty, NonEnumerable, NonConfigurable]
  attribute any length;
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Array {
  [NonEnumerable]
  any toLocaleString(optional any locales, optional any options);
};

// The %ArrayIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace ArrayIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Array Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};

// Int8Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Int8Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Int8Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 1;
};

// Uint8Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Uint8Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Uint8Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 1;
};

// Uint8ClampedArray
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Uint8ClampedArray", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Uint8ClampedArray : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 1;
};

// Int16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Int16Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Int16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 2;
};

// Uint16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Uint16Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Uint16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 2;
};

// Int32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Int32Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Int32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 4;
};

// Uint32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Uint32Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Uint32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 4;
};

// BigInt64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigInt64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 8;
};

// BigUint64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigUint64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 8;
};

// Float16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Float16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 2;
};

// Float32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Float32Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Float32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 4;
};

// Float64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, Name="Float64Array", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Float64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  [NonEnumerable]
  const any BYTES_PER_ELEMENT = 8;
};

// The %TypedArray% Intrinsic Object
// https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface TypedArray {
  [Length="0"]
  constructor();

  [DataProperty, NonEnumerable, Configurable, StringValue="TypedArray"]
  static attribute any name;

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any from(any source, optional any mapper, optional any thisArg);
  [NonEnumerable]
  static any of(any... items);

  [NonEnumerable]
  readonly attribute any buffer;
  [NonEnumerable]
  readonly attribute any byteLength;
  [NonEnumerable]
  readonly attribute any byteOffset;
  [NonEnumerable]
  readonly attribute any length;
  [Name="Symbol.toStringTag", NonEnumerable]
  readonly attribute any _symbol_toStringTag;

  [NonEnumerable]
  any at(any index);
  [NonEnumerable]
  any copyWithin(any target, any start, optional any end);
  [NonEnumerable]
  any entries();
  [NonEnumerable]
  any every(any callback, optional any thisArg);
  [NonEnumerable]
  any fill(any value, optional any start, optional any end);
  [NonEnumerable]
  any filter(any callback, optional any thisArg);
  [NonEnumerable]
  any find(any predicate, optional any thisArg);
  [NonEnumerable]
  any findIndex(any predicate, optional any thisArg);
  [NonEnumerable]
  any findLast(any predicate, optional any thisArg);
  [NonEnumerable]
  any findLastIndex(any predicate, optional any thisArg);
  [NonEnumerable]
  any forEach(any callback, optional any thisArg);
  [Name="includes", NonEnumerable]
  any _includes(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any indexOf(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any join(any separator);
  [NonEnumerable]
  any keys();
  [NonEnumerable]
  any lastIndexOf(any searchElement, optional any fromIndex);
  [NonEnumerable]
  any map(any callback, optional any thisArg);
  [NonEnumerable]
  any reduce(any callback, optional any initialValue);
  [NonEnumerable]
  any reduceRight(any callback, optional any initialValue);
  [NonEnumerable]
  any reverse();
  [NonEnumerable]
  any set(any source, optional any offset);
  [NonEnumerable]
  any slice(any start, any end);
  [NonEnumerable]
  any some(any callback, optional any thisArg);
  [NonEnumerable]
  any sort(any comparator);
  [NonEnumerable]
  any subarray(any start, any end);
  [NonEnumerable]
  any toLocaleString(optional any reserved1, optional any reserved2);
  [NonEnumerable]
  any toReversed();
  [NonEnumerable]
  any toSorted(any comparator);
  // "toString" property is aliased from "Array.prototype.toString".
  [NonEnumerable, Alias="Symbol.iterator"]
  any values();
  [NonEnumerable]
  any with(any index, any value);
  // "Symbol.iterator" property is aliased from "values".
};

// Map Objects
// https://tc39.es/ecma262/#sec-map-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Map {
  constructor(optional any iterable);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any groupBy(any items, any callback);

  [NonEnumerable]
  readonly attribute any size;

  [NonEnumerable]
  any clear();
  [NonEnumerable]
  any delete(any key);
  [NonEnumerable, Alias="Symbol.iterator"]
  any entries();
  [NonEnumerable]
  any forEach(any callback, optional any thisArg);
  [NonEnumerable]
  any get(any key);
  [NonEnumerable]
  any has(any key);
  [NonEnumerable]
  any keys();
  [NonEnumerable]
  any set(any key, any value);
  [NonEnumerable]
  any values();
  // "Symbol.iterator" property is aliased from "entries".
};

// The %MapIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace MapIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Map Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};

// Set Objects
// https://tc39.es/ecma262/#sec-set-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Set {
  constructor(optional any iterable);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  readonly attribute any size;

  [NonEnumerable]
  any add(any value);
  [NonEnumerable]
  any clear();
  [NonEnumerable]
  any delete(any value);
  [NonEnumerable]
  any difference(any other);
  [NonEnumerable]
  any entries();
  [NonEnumerable]
  any forEach(any callback, optional any thisArg);
  [NonEnumerable]
  any has(any value);
  [NonEnumerable]
  any intersection(any other);
  [NonEnumerable]
  any isDisjointFrom(any other);
  [NonEnumerable]
  any isSubsetOf(any other);
  [NonEnumerable]
  any isSupersetOf(any other);
  // "keys" property is aliased from "values".
  [NonEnumerable]
  any symmetricDifference(any other);
  [NonEnumerable]
  any union(any other);
  [NonEnumerable, Alias="keys,Symbol.iterator"]
  any values();
  // "Symbol.iterator" property is aliased from "values".
};

// The %SetIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%setiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace SetIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Set Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};

// WeakMap Objects
// https://tc39.es/ecma262/#sec-weakmap-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakMap {
  constructor(optional any iterable);

  [NonEnumerable]
  any delete(any key);
  [NonEnumerable]
  any get(any key);
  [NonEnumerable]
  any has(any key);
  [NonEnumerable]
  any set(any key, any value);
};

// WeakSet Objects
// https://tc39.es/ecma262/#sec-weakset-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakSet {
  constructor(optional any iterable);

  [NonEnumerable]
  any add(any value);
  [NonEnumerable]
  any delete(any value);
  [NonEnumerable]
  any has(any value);
};

// ArrayBuffer Objects
// https://tc39.es/ecma262/#sec-arraybuffer-objects
[Exposed=*, Name="ArrayBuffer", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _ArrayBuffer {
  constructor(any length, optional any options);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any isView(any arg);

  [NonEnumerable]
  readonly attribute any byteLength;
  [NonEnumerable]
  readonly attribute any detached;
  [NonEnumerable]
  readonly attribute any maxByteLength;
  [NonEnumerable]
  readonly attribute any resizable;

  [NonEnumerable]
  any resize(any newLength);
  [NonEnumerable]
  any slice(any start, any end);
  [NonEnumerable]
  any transfer(optional any newLength);
  [NonEnumerable]
  any transferToFixedLength(optional any newLength);

  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="ArrayBuffer"]
  attribute any _symbol_toStringTag;
};

// SharedArrayBuffer Objects
// https://tc39.es/ecma262/#sec-sharedarraybuffer-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface SharedArrayBuffer {
  constructor(any length, optional any options);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  readonly attribute any byteLength;
  [NonEnumerable]
  readonly attribute any growable;
  [NonEnumerable]
  readonly attribute any maxByteLength;

  [NonEnumerable]
  any grow(any newLength);
  [NonEnumerable]
  any slice(any start, any end);
};

// DataView Objects
// https://tc39.es/ecma262/#sec-dataview-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DataView {
  constructor(any buffer, optional any byteOffset, optional any byteLength);

  [NonEnumerable]
  readonly attribute any buffer;
  [NonEnumerable]
  readonly attribute any byteLength;
  [NonEnumerable]
  readonly attribute any byteOffset;

  [NonEnumerable]
  any getBigInt64(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getBigUint64(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getFloat16(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getFloat32(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getFloat64(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getInt8(any byteOffset);
  [NonEnumerable]
  any getInt16(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getInt32(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getUint8(any byteOffset);
  [NonEnumerable]
  any getUint16(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any getUint32(any byteOffset, optional any littleEndian);
  [NonEnumerable]
  any setBigInt64(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setBigUint64(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setFloat16(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setFloat32(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setFloat64(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setInt8(any byteOffset, any value);
  [NonEnumerable]
  any setInt16(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setInt32(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setUint8(any byteOffset, any value);
  [NonEnumerable]
  any setUint16(any byteOffset, any value, optional any littleEndian);
  [NonEnumerable]
  any setUint32(any byteOffset, any value, optional any littleEndian);
};

// The Atomics Object
// https://tc39.es/ecma262/#sec-atomics-object
[Exposed=*]
namespace Atomics {
  [NonEnumerable]
  any add(any typedArray, any index, any value);
  [NonEnumerable]
  any and(any typedArray, any index, any value);
  [NonEnumerable]
  any compareExchange(any typedArray, any index, any expectedValue, any replacementValue);
  [NonEnumerable]
  any exchange(any typedArray, any index, any value);
  [NonEnumerable]
  any isLockFree(any size);
  [NonEnumerable]
  any load(any typedArray, any index);
  [Name="or", NonEnumerable]
  any _or(any typedArray, any index, any value);
  [NonEnumerable]
  any store(any typedArray, any index, any value);
  [NonEnumerable]
  any sub(any typedArray, any index, any value);
  [NonEnumerable]
  any wait(any typedArray, any index, any value, any timeout);
  [NonEnumerable]
  any waitAsync(any typedArray, any index, any value, any timeout);
  [NonEnumerable]
  any notify(any typedArray, any index, any count);
  [NonEnumerable]
  any xor(any typedArray, any index, any value);
};

// The JSON Object
// https://tc39.es/ecma262/#sec-json-object
[Exposed=*]
namespace JSON {
  [NonEnumerable, Length="2"]
  any parse(any text, optional any reviver);
  [NonEnumerable, Length="3"]
  any stringify(any value, optional any replacer, optional any space);
};

// WeakRef Objects
// https://tc39.es/ecma262/#sec-weak-ref-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakRef {
  [ReadOnly]
  constructor(any target);

  [NonEnumerable]
  any deref();
};

// FinalizationRegistry Objects
// https://tc39.es/ecma262/#sec-finalization-registry-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface FinalizationRegistry {
  constructor(any cleanupCallback);

  [NonEnumerable]
  any register(any target, any heldValue, optional any unregisterToken);
  [NonEnumerable]
  any unregister(any unregisterToken);
};

// The %IteratorHelperPrototype% Object
// https://tc39.es/ecma262/#sec-%iteratorhelperprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace IteratorHelperPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Iterator Helper"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
  [NonEnumerable]
  any return();
};

// Iterator Objects
// https://tc39.es/ecma262/#sec-iterator-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Iterator {
  constructor();

  [NonEnumerable]
  static any from(any O);

  [Name="constructor", NonEnumerable]
  attribute any _constructor;
  [Name="Symbol.toStringTag", NonEnumerable]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any drop(any limit);
  [NonEnumerable]
  any every(any predicate);
  [NonEnumerable]
  any filter(any predicate);
  [NonEnumerable]
  any find(any predicate);
  [NonEnumerable]
  any flatMap(any mapper);
  [NonEnumerable]
  any forEach(any procedure);
  [NonEnumerable]
  any map(any mapper);
  [NonEnumerable]
  any reduce(any reducer, optional any initialValue);
  [NonEnumerable]
  any some(any predicate);
  [NonEnumerable]
  any take(any limit);
  [NonEnumerable]
  any toArray();
  [Name="Symbol.iterator", NonEnumerable]
  any _symbol_iterator();
};

// The %WrapForValidIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%wrapforvaliditeratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace WrapForValidIteratorPrototype {
  [NonEnumerable]
  any next();
  [NonEnumerable]
  any return();
};

// The %AsyncIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-asynciteratorprototype
namespace AsyncIteratorPrototype {
  [Name="Symbol.asyncIterator", NonEnumerable]
  any _symbol_asyncIterator();
};

// The %AsyncFromSyncIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%-object
[PrototypeSlot="AsyncIteratorPrototype"]
namespace AsyncFromSyncIteratorPrototype {
  [NonEnumerable]
  any next(optional any value);
  [NonEnumerable]
  any return(optional any value);
  [NonEnumerable]
  any throw(optional any value);
};

// Promise Objects
// https://tc39.es/ecma262/#sec-promise-objects
[Exposed=*, Name="Promise", NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface _Promise {
  constructor(any executor);

  [Name="Symbol.species", NonEnumerable]
  static readonly attribute any _symbol_species;

  [NonEnumerable]
  static any all(any iterable);
  [NonEnumerable]
  static any allSettled(any iterable);
  [Name="any", NonEnumerable]
  static any _any(any iterable);
  [NonEnumerable]
  static any race(any iterable);
  [NonEnumerable]
  static any reject(any r);
  [NonEnumerable]
  static any resolve(any x);
  [NonEnumerable]
  static any try(any callback, any... args);
  [NonEnumerable]
  static any withResolvers();

  [NonEnumerable]
  any catch(any onRejected);
  [NonEnumerable]
  any finally(any onFinally);
  [NonEnumerable]
  any then(any onFulfilled, any onRejected);

  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Promise"]
  attribute any _symbol_toStringTag;
};

// GeneratorFunction Objects
// https://tc39.es/ecma262/#sec-generatorfunction-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface GeneratorFunction : Function {
  [ReadOnly, Length="1"]
  constructor(any... parameterArgs /* , any bodyArg */);

  [DataProperty, NonEnumerable, Configurable, StringValue="GeneratorFunction"]
  static attribute any name;

  [Name="prototype", DataProperty, NonEnumerable, Configurable, ObjectValue="GeneratorPrototype"]
  attribute any _prototype;

  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any length;
  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any name;
  [Instance, Name="prototype", DataProperty, NonEnumerable, NonConfigurable]
  attribute any _prototype;
};

// AsyncGeneratorFunction Objects
// https://tc39.es/ecma262/#sec-asyncgeneratorfunction-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AsyncGeneratorFunction : Function {
  [ReadOnly, Length="1"]
  constructor(any... parameterArgs /* , any bodyArg */);

  [DataProperty, NonEnumerable, Configurable, StringValue="AsyncGeneratorFunction"]
  static attribute any name;

  [Name="prototype", DataProperty, NonEnumerable, Configurable, ObjectValue="AsyncGeneratorPrototype"]
  attribute any _prototype;

  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any length;
  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any name;
  [Instance, Name="prototype", DataProperty, NonEnumerable, NonConfigurable]
  attribute any _prototype;
};

// The %GeneratorPrototype% Object
// https://tc39.es/ecma262/#sec-properties-of-generator-prototype
[PrototypeSlot="Iterator.prototype"]
namespace GeneratorPrototype {
  [Name="constructor", DataProperty, NonEnumerable, Configurable, ObjectValue="GeneratorFunction.prototype"]
  attribute any _constructor;
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Generator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next(any value);
  [NonEnumerable]
  any return(any value);
  [NonEnumerable]
  any throw(any exception);
};

// The %AsyncGeneratorPrototype% Object
// https://tc39.es/ecma262/#sec-properties-of-asyncgenerator-prototype
[PrototypeSlot="AsyncIteratorPrototype"]
namespace AsyncGeneratorPrototype {
  [Name="constructor", DataProperty, NonEnumerable, Configurable, ObjectValue="AsyncGeneratorFunction.prototype"]
  attribute any _constructor;
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="AsyncGenerator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next(any value);
  [NonEnumerable]
  any return(any value);
  [NonEnumerable]
  any throw(any exception);
};

// AsyncFunction Objects
// https://tc39.es/ecma262/#sec-async-function-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AsyncFunction : Function {
  [ReadOnly, Length="1"]
  constructor(any... parameterArgs /* , any bodyArg */);

  [DataProperty, NonEnumerable, Configurable, StringValue="AsyncFunction"]
  static attribute any name;

  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any length;
  [Instance, DataProperty, NonEnumerable, Configurable]
  attribute any name;
};

// The Reflect Object
// https://tc39.es/ecma262/#sec-reflect-object
[Exposed=*]
namespace Reflect {
  [NonEnumerable]
  any apply(any target, any thisArgument, any argumentsList);
  [NonEnumerable]
  any construct(any target, any argumentsList, optional any newTarget);
  [NonEnumerable]
  any defineProperty(any target, any propertyKey, any attributes);
  [NonEnumerable]
  any deleteProperty(any target, any propertyKey);
  [NonEnumerable]
  any get(any target, any propertyKey, optional any receiver);
  [NonEnumerable]
  any getOwnPropertyDescriptor(any target, any propertyKey);
  [NonEnumerable]
  any getPrototypeOf(any target);
  [NonEnumerable]
  any has(any target, any propertyKey);
  [NonEnumerable]
  any isExtensible(any target);
  [NonEnumerable]
  any ownKeys(any target);
  [NonEnumerable]
  any preventExtensions(any target);
  [NonEnumerable]
  any set(any target, any propertyKey, any V, optional any receiver);
  [NonEnumerable]
  any setPrototypeOf(any target, any proto);
};

// Proxy Objects
// https://tc39.es/ecma262/#sec-proxy-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Proxy {
  constructor(any target, any handler);

  [NonEnumerable]
  static any revocable(any target, any handler);
};

// Module Namespace Objects
// https://tc39.es/ecma262/#sec-module-namespace-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ModuleNamespace {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, NonConfigurable]
  static attribute any _symbol_toStringTag;
};

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/

// The Intl Object
// https://tc39.es/ecma402/#intl-object
[Exposed=*]
namespace Intl {
  [NonEnumerable]
  any getCanonicalLocales(any locales);
  [NonEnumerable]
  any supportedValuesOf(any key);
};

// Collator Objects
// https://tc39.es/ecma402/#collator-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Collator {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  readonly attribute any compare;

  [NonEnumerable]
  any resolvedOptions();
};

// DateTimeFormat Objects
// https://tc39.es/ecma402/#datetimeformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DateTimeFormat {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  readonly attribute any format;

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any formatRange(any startDate, any endDate);
  [NonEnumerable]
  any formatRangeToParts(any startDate, any endDate);
  [NonEnumerable]
  any formatToParts(any date);
};

// DisplayNames Objects
// https://tc39.es/ecma402/#intl-displaynames-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DisplayNames {
  constructor(any locales, any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any of(any code);
};

// DurationFormat Objects
// https://tc39.es/ecma402/#durationformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DurationFormat {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any format(any duration);
  [NonEnumerable]
  any formatToParts(any duration);
};

// ListFormat Objects
// https://tc39.es/ecma402/#listformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ListFormat {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any format(any list);
  [NonEnumerable]
  any formatToParts(any list);
};

// Locale Objects
// https://tc39.es/ecma402/#locale-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Locale {
  constructor(any tag, optional any options);

  [NonEnumerable]
  readonly attribute any baseName;
  [NonEnumerable]
  readonly attribute any calendar;
  [NonEnumerable]
  readonly attribute any caseFirst;
  [NonEnumerable]
  readonly attribute any collation;
  [NonEnumerable]
  readonly attribute any hourCycle;
  [NonEnumerable]
  readonly attribute any language;
  [NonEnumerable]
  readonly attribute any numberingSystem;
  [NonEnumerable]
  readonly attribute any numeric;
  [NonEnumerable]
  readonly attribute any region;
  [NonEnumerable]
  readonly attribute any script;

  [NonEnumerable]
  any maximize();
  [NonEnumerable]
  any minimize();
  [Name="toString", NonEnumerable]
  any _toString();
};

// NumberFormat Objects
// https://tc39.es/ecma402/#numberformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface NumberFormat {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  readonly attribute any format;

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any formatRange(any start, any end);
  [NonEnumerable]
  any formatRangeToParts(any start, any end);
  [NonEnumerable]
  any formatToParts(any value);
};

// PluralRules Objects
// https://tc39.es/ecma402/#pluralrules-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface PluralRules {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any select(any value);
  [NonEnumerable]
  any selectRange(any start, any end);
};

// RelativeTimeFormat Objects
// https://tc39.es/ecma402/#relativetimeformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RelativeTimeFormat {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any format(any value, any unit);
  [NonEnumerable]
  any formatToParts(any value, any unit);
};

// Segmenter Objects
// https://tc39.es/ecma402/#segmenter-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Segmenter {
  constructor(optional any locales, optional any options);

  [NonEnumerable]
  static any supportedLocalesOf(any locales, optional any options);

  [NonEnumerable]
  any resolvedOptions();
  [NonEnumerable]
  any segment(any string);
};

// The %IntlSegmentsPrototype% Object
// https://tc39.es/ecma402/#sec-%intlsegmentsprototype%-object
namespace IntlSegmentsPrototype {
  [NonEnumerable]
  any containing(any index);
  [Name="Symbol.iterator", NonEnumerable]
  any _symbol_iterator();
};

// The %IntlSegmentIteratorPrototype% Object
// https://tc39.es/ecma402/#sec-%intlsegmentiteratorprototype%-object
[PrototypeSlot="Iterator.prototype"]
namespace IntlSegmentIteratorPrototype {
  [Name="Symbol.toStringTag", DataProperty, NonEnumerable, Configurable, StringValue="Segmenter String Iterator"]
  attribute any _symbol_toStringTag;

  [NonEnumerable]
  any next();
};
