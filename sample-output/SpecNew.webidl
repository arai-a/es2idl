/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* This file is generated by es2idl.py */

// ECMAScriptÂ® Language Specification
// https://tc39.es/ecma262/

// Proxy Object Internal Methods and Internal Slots
// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots
dictionary ProxyHandler {
  optional getPrototypeOfCallback getPrototypeOf;
  optional setPrototypeOfCallback setPrototypeOf;
  optional isExtensibleCallback isExtensible;
  optional preventExtensionsCallback preventExtensions;
  optional getOwnPropertyDescriptorCallback getOwnPropertyDescriptor;
  optional definePropertyCallback defineProperty;
  optional hasCallback has;
  optional getCallback get;
  optional setCallback set;
  optional deletePropertyCallback deleteProperty;
  optional ownKeysCallback ownKeys;
  optional applyCallback apply;
  optional constructCallback construct;
};

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof
callback getPrototypeOfCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v
callback setPrototypeOfCallback = any (any target, any V);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-isextensible
callback isExtensibleCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-preventextensions
callback preventExtensionsCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p
callback getOwnPropertyDescriptorCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc
callback definePropertyCallback = any (any target, any P, any descObj);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p
callback hasCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver
callback getCallback = any (any target, any P, any Receiver);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver
callback setCallback = any (any target, any P, any V, any Receiver);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-delete-p
callback deletePropertyCallback = any (any target, any P);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys
callback ownKeysCallback = any (any target);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist
callback applyCallback = any (any target, any thisArgument, any argArray);

// https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget
callback constructCallback = any (any target, any argArray, any newTarget);

// The %ForInIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%foriniteratorprototype%-object
[NoBrandCheck]
prototype ForInIteratorPrototype : Iterator.prototype {
  non_enumerable any next();
};

// The Global Object
// https://tc39.es/ecma262/#sec-global-object
[Global=Global, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Global {
  property any globalThis = GlobalThisValue;
  readonly non_configurable property any Infinity = Infinity;
  readonly non_configurable property any NaN = NaN;
  readonly non_configurable property any undefined = undefined;

  non_enumerable any eval(any x);
  non_enumerable any isFinite(any number);
  non_enumerable any isNaN(any number);
  [Alias="Number.parseFloat"]
  non_enumerable any parseFloat(any string);
  [Alias="Number.parseInt"]
  non_enumerable any parseInt(any string, any radix);
  non_enumerable any decodeURI(any encodedURI);
  non_enumerable any decodeURIComponent(any encodedURIComponent);
  non_enumerable any encodeURI(any uri);
  non_enumerable any encodeURIComponent(any uriComponent);
  non_enumerable any escape(any string);
  non_enumerable any unescape(any string);
};

// Object Objects
// https://tc39.es/ecma262/#sec-object-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Object : null {
  [Length="1"]
  constructor(optional any value);

  [Length="2"]
  static non_enumerable any assign(any target, any... sources);
  static non_enumerable any create(any O, any Properties);
  static non_enumerable any defineProperties(any O, any Properties);
  static non_enumerable any defineProperty(any O, any P, any Attributes);
  static non_enumerable any entries(any O);
  static non_enumerable any freeze(any O);
  static non_enumerable any fromEntries(any iterable);
  static non_enumerable any getOwnPropertyDescriptor(any O, any P);
  static non_enumerable any getOwnPropertyDescriptors(any O);
  static non_enumerable any getOwnPropertyNames(any O);
  static non_enumerable any getOwnPropertySymbols(any O);
  static non_enumerable any getPrototypeOf(any O);
  static non_enumerable any groupBy(any items, any callback);
  static non_enumerable any hasOwn(any O, any P);
  static non_enumerable any is(any value1, any value2);
  static non_enumerable any isExtensible(any O);
  static non_enumerable any isFrozen(any O);
  static non_enumerable any isSealed(any O);
  static non_enumerable any keys(any O);
  static non_enumerable any preventExtensions(any O);
  static non_enumerable any seal(any O);
  static non_enumerable any setPrototypeOf(any O, any proto);
  static non_enumerable any values(any O);

  non_enumerable attribute any ___proto__;

  non_enumerable any hasOwnProperty(any V);
  non_enumerable any isPrototypeOf(any V);
  non_enumerable any propertyIsEnumerable(any V);
  non_enumerable any toLocaleString(optional any reserved1, optional any reserved2);
  non_enumerable any toString();
  non_enumerable any valueOf();
  non_enumerable any ___defineGetter__(any P, any getter);
  non_enumerable any ___defineSetter__(any P, any setter);
  non_enumerable any ___lookupGetter__(any P);
  non_enumerable any ___lookupSetter__(any P);
};

// Function Objects
// https://tc39.es/ecma262/#sec-function-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Function {
  [Length="1"]
  constructor(any... parameterArgs /* , any bodyArg */);

  non_enumerable any apply(any thisArg, any argArray);
  non_enumerable any bind(any thisArg, any... args);
  non_enumerable any call(any thisArg, any... args);
  non_enumerable any toString();
  readonly non_enumerable non_configurable any @@hasInstance(any V);

  property any length = 0;
  property any name = "";

  instance readonly property any length;
  instance readonly property any name;
  instance non_configurable property any prototype;
};

// Boolean Objects
// https://tc39.es/ecma262/#sec-boolean-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Boolean {
  constructor(any value);

  non_enumerable any toString();
  non_enumerable any valueOf();
};

// Symbol Objects
// https://tc39.es/ecma262/#sec-symbol-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Symbol {
  constructor(optional any description);

  static readonly non_configurable property any asyncIterator = @@asyncIterator;
  static readonly non_configurable property any hasInstance = @@hasInstance;
  static readonly non_configurable property any isConcatSpreadable = @@isConcatSpreadable;
  static readonly non_configurable property any iterator = @@iterator;
  static readonly non_configurable property any match = @@match;
  static readonly non_configurable property any matchAll = @@matchAll;
  static readonly non_configurable property any replace = @@replace;
  static readonly non_configurable property any search = @@search;
  static readonly non_configurable property any species = @@species;
  static readonly non_configurable property any split = @@split;
  static readonly non_configurable property any toPrimitive = @@toPrimitive;
  static readonly non_configurable property any toStringTag = @@toStringTag;
  static readonly non_configurable property any unscopables = @@unscopables;

  static non_enumerable any for(any key);
  static non_enumerable any keyFor(any sym);

  non_enumerable readonly attribute any description;

  non_enumerable any toString();
  non_enumerable any valueOf();
  readonly non_enumerable any @@toPrimitive(any hint);
};

// Error Objects
// https://tc39.es/ecma262/#sec-error-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Error {
  constructor(any message, optional any options);

  non_enumerable any toString();

  property any message = "";
  property any name = "Error";
};

// EvalError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-evalerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface EvalError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "EvalError";
};

// RangeError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RangeError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "RangeError";
};

// ReferenceError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-referenceerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ReferenceError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "ReferenceError";
};

// SyntaxError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-syntaxerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface SyntaxError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "SyntaxError";
};

// TypeError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface TypeError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "TypeError";
};

// URIError
// https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-urierror
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface URIError : Error {
  constructor(any message, optional any options);

  static property any name = "NativeError";

  property any message = "";
  property any name = "URIError";
};

// AggregateError Objects
// https://tc39.es/ecma262/#sec-aggregate-error-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AggregateError : Error {
  constructor(any errors, any message, optional any options);

  property any message = "";
  property any name = "AggregateError";
};

// Number Objects
// https://tc39.es/ecma262/#sec-number-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Number {
  constructor(any value);

  static readonly non_configurable property any EPSILON = EPSILON;
  static readonly non_configurable property any MAX_SAFE_INTEGER = 9007199254740991;
  static readonly non_configurable property any MAX_VALUE = MAX_VALUE;
  static readonly non_configurable property any MIN_SAFE_INTEGER = -9007199254740991;
  static readonly non_configurable property any MIN_VALUE = MIN_VALUE;
  static readonly non_configurable property any NaN = NaN;
  static readonly non_configurable property any NEGATIVE_INFINITY = -Infinity;
  static readonly non_configurable property any POSITIVE_INFINITY = Infinity;

  static non_enumerable any isFinite(any number);
  static non_enumerable any isInteger(any number);
  static non_enumerable any isNaN(any number);
  static non_enumerable any isSafeInteger(any number);
  // "parseFloat" property is aliased from "Global.parseFloat".
  // "parseInt" property is aliased from "Global.parseInt".

  non_enumerable any toExponential(any fractionDigits);
  non_enumerable any toFixed(any fractionDigits);
  non_enumerable any toPrecision(any precision);
  [Length="1"]
  non_enumerable any toString(optional any radix);
  non_enumerable any valueOf();
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Number {
  non_enumerable any toLocaleString(optional any locales, optional any options);
};

// BigInt Objects
// https://tc39.es/ecma262/#sec-bigint-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigInt {
  constructor(any value);

  static non_enumerable any asIntN(any bits, any bigint);
  static non_enumerable any asUintN(any bits, any bigint);

  non_enumerable any toString(optional any radix);
  non_enumerable any valueOf();
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface BigInt {
  non_enumerable any toLocaleString(optional any locales, optional any options);
};

// The Math Object
// https://tc39.es/ecma262/#sec-math-object
[Exposed=*]
namespace Math {
  readonly non_configurable property any E = E;
  readonly non_configurable property any LN10 = LN10;
  readonly non_configurable property any LN2 = LN2;
  readonly non_configurable property any LOG10E = LOG10E;
  readonly non_configurable property any LOG2E = LOG2E;
  readonly non_configurable property any PI = PI;
  readonly non_configurable property any SQRT1_2 = SQRT1_2;
  readonly non_configurable property any SQRT2 = SQRT2;

  non_enumerable any abs(any x);
  non_enumerable any acos(any x);
  non_enumerable any acosh(any x);
  non_enumerable any asin(any x);
  non_enumerable any asinh(any x);
  non_enumerable any atan(any x);
  non_enumerable any atanh(any x);
  non_enumerable any atan2(any y, any x);
  non_enumerable any cbrt(any x);
  non_enumerable any ceil(any x);
  non_enumerable any clz32(any x);
  non_enumerable any cos(any x);
  non_enumerable any cosh(any x);
  non_enumerable any exp(any x);
  non_enumerable any expm1(any x);
  non_enumerable any floor(any x);
  non_enumerable any fround(any x);
  non_enumerable any f16round(any x);
  [Length="2"]
  non_enumerable any hypot(any... args);
  non_enumerable any imul(any x, any y);
  non_enumerable any log(any x);
  non_enumerable any log1p(any x);
  non_enumerable any log10(any x);
  non_enumerable any log2(any x);
  [Length="2"]
  non_enumerable any max(any... args);
  [Length="2"]
  non_enumerable any min(any... args);
  non_enumerable any pow(any base, any exponent);
  non_enumerable any random();
  non_enumerable any round(any x);
  non_enumerable any sign(any x);
  non_enumerable any sin(any x);
  non_enumerable any sinh(any x);
  non_enumerable any sqrt(any x);
  non_enumerable any tan(any x);
  non_enumerable any tanh(any x);
  non_enumerable any trunc(any x);
};

// Date Objects
// https://tc39.es/ecma262/#sec-date-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Date {
  [Length="7"]
  constructor(any... values);

  static non_enumerable any now();
  static non_enumerable any parse(any string);
  [Length="7"]
  static non_enumerable any UTC(any year, optional any month, optional any date, optional any hours, optional any minutes, optional any seconds, optional any ms);

  non_enumerable any getDate();
  non_enumerable any getDay();
  non_enumerable any getFullYear();
  non_enumerable any getHours();
  non_enumerable any getMilliseconds();
  non_enumerable any getMinutes();
  non_enumerable any getMonth();
  non_enumerable any getSeconds();
  non_enumerable any getTime();
  non_enumerable any getTimezoneOffset();
  non_enumerable any getUTCDate();
  non_enumerable any getUTCDay();
  non_enumerable any getUTCFullYear();
  non_enumerable any getUTCHours();
  non_enumerable any getUTCMilliseconds();
  non_enumerable any getUTCMinutes();
  non_enumerable any getUTCMonth();
  non_enumerable any getUTCSeconds();
  non_enumerable any setDate(any date);
  [Length="3"]
  non_enumerable any setFullYear(any year, optional any month, optional any date);
  [Length="4"]
  non_enumerable any setHours(any hour, optional any min, optional any sec, optional any ms);
  non_enumerable any setMilliseconds(any ms);
  [Length="3"]
  non_enumerable any setMinutes(any min, optional any sec, optional any ms);
  [Length="2"]
  non_enumerable any setMonth(any month, optional any date);
  [Length="2"]
  non_enumerable any setSeconds(any sec, optional any ms);
  non_enumerable any setTime(any time);
  non_enumerable any setUTCDate(any date);
  [Length="3"]
  non_enumerable any setUTCFullYear(any year, optional any month, optional any date);
  [Length="4"]
  non_enumerable any setUTCHours(any hour, optional any min, optional any sec, optional any ms);
  non_enumerable any setUTCMilliseconds(any ms);
  [Length="3"]
  non_enumerable any setUTCMinutes(any min, optional any sec, optional any ms);
  [Length="2"]
  non_enumerable any setUTCMonth(any month, optional any date);
  [Length="2"]
  non_enumerable any setUTCSeconds(any sec, optional any ms);
  non_enumerable any toDateString();
  non_enumerable any toISOString();
  non_enumerable any toJSON(any key);
  non_enumerable any toString();
  non_enumerable any toTimeString();
  [Alias="toGMTString"]
  non_enumerable any toUTCString();
  non_enumerable any valueOf();
  readonly non_enumerable any @@toPrimitive(any hint);
  non_enumerable any getYear();
  non_enumerable any setYear(any year);
  // "toGMTString" property is aliased from "toUTCString".
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Date {
  non_enumerable any toLocaleDateString(optional any locales, optional any options);
  non_enumerable any toLocaleString(optional any locales, optional any options);
  non_enumerable any toLocaleTimeString(optional any locales, optional any options);
};

// String Objects
// https://tc39.es/ecma262/#sec-string-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface String {
  constructor(any value);

  [Length="1"]
  static non_enumerable any fromCharCode(any... codeUnits);
  [Length="1"]
  static non_enumerable any fromCodePoint(any... codePoints);
  static non_enumerable any raw(any template, any... substitutions);

  non_enumerable any at(any index);
  non_enumerable any charAt(any pos);
  non_enumerable any charCodeAt(any pos);
  non_enumerable any codePointAt(any pos);
  [Length="1"]
  non_enumerable any concat(any... args);
  non_enumerable any endsWith(any searchString, optional any endPosition);
  non_enumerable any includes(any searchString, optional any position);
  non_enumerable any indexOf(any searchString, optional any position);
  non_enumerable any isWellFormed();
  non_enumerable any lastIndexOf(any searchString, optional any position);
  non_enumerable any match(any regexp);
  non_enumerable any matchAll(any regexp);
  non_enumerable any normalize(optional any form);
  non_enumerable any padEnd(any maxLength, optional any fillString);
  non_enumerable any padStart(any maxLength, optional any fillString);
  non_enumerable any repeat(any count);
  non_enumerable any replace(any searchValue, any replaceValue);
  non_enumerable any replaceAll(any searchValue, any replaceValue);
  non_enumerable any search(any regexp);
  non_enumerable any slice(any start, any end);
  non_enumerable any split(any separator, any limit);
  non_enumerable any startsWith(any searchString, optional any position);
  non_enumerable any substring(any start, any end);
  non_enumerable any toLowerCase();
  non_enumerable any toString();
  non_enumerable any toUpperCase();
  non_enumerable any toWellFormed();
  non_enumerable any trim();
  [Alias="trimRight"]
  non_enumerable any trimEnd();
  [Alias="trimLeft"]
  non_enumerable any trimStart();
  non_enumerable any valueOf();
  non_enumerable any @@iterator();
  non_enumerable any substr(any start, any length);
  non_enumerable any anchor(any name);
  non_enumerable any big();
  non_enumerable any blink();
  non_enumerable any bold();
  non_enumerable any fixed();
  non_enumerable any fontcolor(any colour);
  non_enumerable any fontsize(any size);
  non_enumerable any italics();
  non_enumerable any link(any url);
  non_enumerable any small();
  non_enumerable any strike();
  non_enumerable any sub();
  non_enumerable any sup();
  // "trimLeft" property is aliased from "trimStart".
  // "trimRight" property is aliased from "trimEnd".

  readonly non_configurable property any length = 0;

  instance readonly non_configurable property any length;
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface String {
  [Length="1"]
  non_enumerable any localeCompare(any that, optional any locales, optional any options);
  non_enumerable any toLocaleLowerCase(optional any locales);
  non_enumerable any toLocaleUpperCase(optional any locales);
};

// The %StringIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object
[NoBrandCheck]
prototype StringIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "String Iterator";

  non_enumerable any next();
};

// RegExp (Regular Expression) Objects
// https://tc39.es/ecma262/#sec-regexp-regular-expression-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RegExp {
  constructor(any pattern, any flags);

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any escape(any S);

  non_enumerable readonly attribute any dotAll;
  non_enumerable readonly attribute any flags;
  non_enumerable readonly attribute any global;
  non_enumerable readonly attribute any hasIndices;
  non_enumerable readonly attribute any ignoreCase;
  non_enumerable readonly attribute any multiline;
  non_enumerable readonly attribute any source;
  non_enumerable readonly attribute any sticky;
  non_enumerable readonly attribute any unicode;
  non_enumerable readonly attribute any unicodeSets;

  non_enumerable any exec(any string);
  non_enumerable any @@match(any string);
  non_enumerable any @@matchAll(any string);
  non_enumerable any @@replace(any string, any replaceValue);
  non_enumerable any @@search(any string);
  non_enumerable any @@split(any string, any limit);
  non_enumerable any test(any S);
  non_enumerable any toString();
  non_enumerable any compile(any pattern, any flags);

  instance non_configurable property any lastIndex;
};

// The %RegExpStringIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object
[NoBrandCheck]
prototype RegExpStringIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "RegExp String Iterator";

  non_enumerable any next();
};

// Array Objects
// https://tc39.es/ecma262/#sec-array-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot, CustomPrototype]
interface Array {
  [Length="1"]
  constructor(any... values);

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any from(any items, optional any mapper, optional any thisArg);
  static non_enumerable any isArray(any arg);
  static non_enumerable any of(any... items);

  [Unscopable]
  non_enumerable any at(any index);
  [Length="1"]
  non_enumerable any concat(any... items);
  [Unscopable]
  non_enumerable any copyWithin(any target, any start, optional any end);
  [Unscopable]
  non_enumerable any entries();
  non_enumerable any every(any callback, optional any thisArg);
  [Unscopable]
  non_enumerable any fill(any value, optional any start, optional any end);
  non_enumerable any filter(any callback, optional any thisArg);
  [Unscopable]
  non_enumerable any find(any predicate, optional any thisArg);
  [Unscopable]
  non_enumerable any findIndex(any predicate, optional any thisArg);
  [Unscopable]
  non_enumerable any findLast(any predicate, optional any thisArg);
  [Unscopable]
  non_enumerable any findLastIndex(any predicate, optional any thisArg);
  [Unscopable]
  non_enumerable any flat(optional any depth);
  [Unscopable]
  non_enumerable any flatMap(any mapperFunction, optional any thisArg);
  non_enumerable any forEach(any callback, optional any thisArg);
  [Unscopable]
  non_enumerable any includes(any searchElement, optional any fromIndex);
  non_enumerable any indexOf(any searchElement, optional any fromIndex);
  non_enumerable any join(any separator);
  [Unscopable]
  non_enumerable any keys();
  non_enumerable any lastIndexOf(any searchElement, optional any fromIndex);
  non_enumerable any map(any callback, optional any thisArg);
  non_enumerable any pop();
  [Length="1"]
  non_enumerable any push(any... items);
  non_enumerable any reduce(any callback, optional any initialValue);
  non_enumerable any reduceRight(any callback, optional any initialValue);
  non_enumerable any reverse();
  non_enumerable any shift();
  non_enumerable any slice(any start, any end);
  non_enumerable any some(any callback, optional any thisArg);
  non_enumerable any sort(any comparator);
  non_enumerable any splice(any start, any deleteCount, any... items);
  [Unscopable]
  non_enumerable any toReversed();
  [Unscopable]
  non_enumerable any toSorted(any comparator);
  [Unscopable]
  non_enumerable any toSpliced(any start, any skipCount, any... items);
  [Alias="TypedArray.prototype.toString"]
  non_enumerable any toString();
  [Length="1"]
  non_enumerable any unshift(any... items);
  [Alias="@@iterator", Unscopable]
  non_enumerable any values();
  non_enumerable any with(any index, any value);
  // "@@iterator" property is aliased from "values".

  non_configurable property any length = 0;

  instance non_configurable property any length;
}

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/
partial interface Array {
  non_enumerable any toLocaleString(optional any locales, optional any options);
};

// The %ArrayIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object
[NoBrandCheck]
prototype ArrayIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Array Iterator";

  non_enumerable any next();
};

// Int8Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Int8Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 1;
};

// Uint8Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Uint8Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 1;
};

// Uint8ClampedArray
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Uint8ClampedArray : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 1;
};

// Int16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Int16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 2;
};

// Uint16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Uint16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 2;
};

// Int32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Int32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 4;
};

// Uint32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Uint32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 4;
};

// BigInt64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigInt64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 8;
};

// BigUint64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface BigUint64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 8;
};

// Float16Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Float16Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 2;
};

// Float32Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Float32Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 4;
};

// Float64Array
// https://tc39.es/ecma262/#sec-typedarray-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Float64Array : TypedArray {
  [Length="3"]
  constructor(any... args);

  non_enumerable const any BYTES_PER_ELEMENT = 8;
};

// The %TypedArray% Intrinsic Object
// https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface TypedArray {
  [Length="0"]
  constructor();

  static property any name = "TypedArray";

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any from(any source, optional any mapper, optional any thisArg);
  static non_enumerable any of(any... items);

  non_enumerable readonly attribute any buffer;
  non_enumerable readonly attribute any byteLength;
  non_enumerable readonly attribute any byteOffset;
  non_enumerable readonly attribute any length;
  non_enumerable readonly attribute any @@toStringTag;

  non_enumerable any at(any index);
  non_enumerable any copyWithin(any target, any start, optional any end);
  non_enumerable any entries();
  non_enumerable any every(any callback, optional any thisArg);
  non_enumerable any fill(any value, optional any start, optional any end);
  non_enumerable any filter(any callback, optional any thisArg);
  non_enumerable any find(any predicate, optional any thisArg);
  non_enumerable any findIndex(any predicate, optional any thisArg);
  non_enumerable any findLast(any predicate, optional any thisArg);
  non_enumerable any findLastIndex(any predicate, optional any thisArg);
  non_enumerable any forEach(any callback, optional any thisArg);
  non_enumerable any includes(any searchElement, optional any fromIndex);
  non_enumerable any indexOf(any searchElement, optional any fromIndex);
  non_enumerable any join(any separator);
  non_enumerable any keys();
  non_enumerable any lastIndexOf(any searchElement, optional any fromIndex);
  non_enumerable any map(any callback, optional any thisArg);
  non_enumerable any reduce(any callback, optional any initialValue);
  non_enumerable any reduceRight(any callback, optional any initialValue);
  non_enumerable any reverse();
  non_enumerable any set(any source, optional any offset);
  non_enumerable any slice(any start, any end);
  non_enumerable any some(any callback, optional any thisArg);
  non_enumerable any sort(any comparator);
  non_enumerable any subarray(any start, any end);
  non_enumerable any toLocaleString(optional any reserved1, optional any reserved2);
  non_enumerable any toReversed();
  non_enumerable any toSorted(any comparator);
  // "toString" property is aliased from "Array.prototype.toString".
  [Alias="@@iterator"]
  non_enumerable any values();
  non_enumerable any with(any index, any value);
  // "@@iterator" property is aliased from "values".
};

// Map Objects
// https://tc39.es/ecma262/#sec-map-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Map {
  constructor(optional any iterable);

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any groupBy(any items, any callback);

  non_enumerable readonly attribute any size;

  non_enumerable any clear();
  non_enumerable any delete(any key);
  [Alias="@@iterator"]
  non_enumerable any entries();
  non_enumerable any forEach(any callback, optional any thisArg);
  non_enumerable any get(any key);
  non_enumerable any has(any key);
  non_enumerable any keys();
  non_enumerable any set(any key, any value);
  non_enumerable any values();
  // "@@iterator" property is aliased from "entries".
};

// The %MapIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object
[NoBrandCheck]
prototype MapIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Map Iterator";

  non_enumerable any next();
};

// Set Objects
// https://tc39.es/ecma262/#sec-set-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Set {
  constructor(optional any iterable);

  static non_enumerable readonly attribute any @@species;

  non_enumerable readonly attribute any size;

  non_enumerable any add(any value);
  non_enumerable any clear();
  non_enumerable any delete(any value);
  non_enumerable any difference(any other);
  non_enumerable any entries();
  non_enumerable any forEach(any callback, optional any thisArg);
  non_enumerable any has(any value);
  non_enumerable any intersection(any other);
  non_enumerable any isDisjointFrom(any other);
  non_enumerable any isSubsetOf(any other);
  non_enumerable any isSupersetOf(any other);
  // "keys" property is aliased from "values".
  non_enumerable any symmetricDifference(any other);
  non_enumerable any union(any other);
  [Alias="keys,@@iterator"]
  non_enumerable any values();
  // "@@iterator" property is aliased from "values".
};

// The %SetIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%setiteratorprototype%-object
[NoBrandCheck]
prototype SetIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Set Iterator";

  non_enumerable any next();
};

// WeakMap Objects
// https://tc39.es/ecma262/#sec-weakmap-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakMap {
  constructor(optional any iterable);

  non_enumerable any delete(any key);
  non_enumerable any get(any key);
  non_enumerable any has(any key);
  non_enumerable any set(any key, any value);
};

// WeakSet Objects
// https://tc39.es/ecma262/#sec-weakset-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakSet {
  constructor(optional any iterable);

  non_enumerable any add(any value);
  non_enumerable any delete(any value);
  non_enumerable any has(any value);
};

// ArrayBuffer Objects
// https://tc39.es/ecma262/#sec-arraybuffer-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ArrayBuffer {
  constructor(any length, optional any options);

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any isView(any arg);

  non_enumerable readonly attribute any byteLength;
  non_enumerable readonly attribute any detached;
  non_enumerable readonly attribute any maxByteLength;
  non_enumerable readonly attribute any resizable;

  non_enumerable any resize(any newLength);
  non_enumerable any slice(any start, any end);
  non_enumerable any transfer(optional any newLength);
  non_enumerable any transferToFixedLength(optional any newLength);
};

// SharedArrayBuffer Objects
// https://tc39.es/ecma262/#sec-sharedarraybuffer-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface SharedArrayBuffer {
  constructor(any length, optional any options);

  static non_enumerable readonly attribute any @@species;

  non_enumerable readonly attribute any byteLength;
  non_enumerable readonly attribute any growable;
  non_enumerable readonly attribute any maxByteLength;

  non_enumerable any grow(any newLength);
  non_enumerable any slice(any start, any end);
};

// DataView Objects
// https://tc39.es/ecma262/#sec-dataview-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DataView {
  constructor(any buffer, optional any byteOffset, optional any byteLength);

  non_enumerable readonly attribute any buffer;
  non_enumerable readonly attribute any byteLength;
  non_enumerable readonly attribute any byteOffset;

  non_enumerable any getBigInt64(any byteOffset, optional any littleEndian);
  non_enumerable any getBigUint64(any byteOffset, optional any littleEndian);
  non_enumerable any getFloat16(any byteOffset, optional any littleEndian);
  non_enumerable any getFloat32(any byteOffset, optional any littleEndian);
  non_enumerable any getFloat64(any byteOffset, optional any littleEndian);
  non_enumerable any getInt8(any byteOffset);
  non_enumerable any getInt16(any byteOffset, optional any littleEndian);
  non_enumerable any getInt32(any byteOffset, optional any littleEndian);
  non_enumerable any getUint8(any byteOffset);
  non_enumerable any getUint16(any byteOffset, optional any littleEndian);
  non_enumerable any getUint32(any byteOffset, optional any littleEndian);
  non_enumerable any setBigInt64(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setBigUint64(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setFloat16(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setFloat32(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setFloat64(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setInt8(any byteOffset, any value);
  non_enumerable any setInt16(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setInt32(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setUint8(any byteOffset, any value);
  non_enumerable any setUint16(any byteOffset, any value, optional any littleEndian);
  non_enumerable any setUint32(any byteOffset, any value, optional any littleEndian);
};

// The Atomics Object
// https://tc39.es/ecma262/#sec-atomics-object
[Exposed=*]
namespace Atomics {
  non_enumerable any add(any typedArray, any index, any value);
  non_enumerable any and(any typedArray, any index, any value);
  non_enumerable any compareExchange(any typedArray, any index, any expectedValue, any replacementValue);
  non_enumerable any exchange(any typedArray, any index, any value);
  non_enumerable any isLockFree(any size);
  non_enumerable any load(any typedArray, any index);
  non_enumerable any or(any typedArray, any index, any value);
  non_enumerable any store(any typedArray, any index, any value);
  non_enumerable any sub(any typedArray, any index, any value);
  non_enumerable any wait(any typedArray, any index, any value, any timeout);
  non_enumerable any waitAsync(any typedArray, any index, any value, any timeout);
  non_enumerable any notify(any typedArray, any index, any count);
  non_enumerable any xor(any typedArray, any index, any value);
};

// The JSON Object
// https://tc39.es/ecma262/#sec-json-object
[Exposed=*]
namespace JSON {
  [Length="2"]
  non_enumerable any parse(any text, optional any reviver);
  [Length="3"]
  non_enumerable any stringify(any value, optional any replacer, optional any space);
};

// WeakRef Objects
// https://tc39.es/ecma262/#sec-weak-ref-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface WeakRef {
  readonly constructor(any target);

  non_enumerable any deref();
};

// FinalizationRegistry Objects
// https://tc39.es/ecma262/#sec-finalization-registry-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface FinalizationRegistry {
  constructor(any cleanupCallback);

  non_enumerable any register(any target, any heldValue, optional any unregisterToken);
  non_enumerable any unregister(any unregisterToken);
};

// The %IteratorHelperPrototype% Object
// https://tc39.es/ecma262/#sec-%iteratorhelperprototype%-object
[NoBrandCheck]
prototype IteratorHelperPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Iterator Helper";

  non_enumerable any next();
  non_enumerable any return();
};

// Iterator Objects
// https://tc39.es/ecma262/#sec-iterator-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Iterator {
  constructor();

  static non_enumerable any from(any O);

  non_enumerable attribute any constructor;
  non_enumerable attribute any @@toStringTag;

  non_enumerable any drop(any limit);
  non_enumerable any every(any predicate);
  non_enumerable any filter(any predicate);
  non_enumerable any find(any predicate);
  non_enumerable any flatMap(any mapper);
  non_enumerable any forEach(any procedure);
  non_enumerable any map(any mapper);
  non_enumerable any reduce(any reducer, optional any initialValue);
  non_enumerable any some(any predicate);
  non_enumerable any take(any limit);
  non_enumerable any toArray();
  non_enumerable any @@iterator();
};

// The %WrapForValidIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%wrapforvaliditeratorprototype%-object
[NoBrandCheck]
prototype WrapForValidIteratorPrototype : Iterator.prototype {
  non_enumerable any next();
  non_enumerable any return();
};

// The %AsyncIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-asynciteratorprototype
[NoBrandCheck]
prototype AsyncIteratorPrototype : Object.prototype {
  non_enumerable any @@asyncIterator();
};

// The %AsyncFromSyncIteratorPrototype% Object
// https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%-object
[NoBrandCheck]
prototype AsyncFromSyncIteratorPrototype : AsyncIteratorPrototype {
  non_enumerable any next(optional any value);
  non_enumerable any return(optional any value);
  non_enumerable any throw(optional any value);
};

// Promise Objects
// https://tc39.es/ecma262/#sec-promise-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Promise {
  constructor(any executor);

  static non_enumerable readonly attribute any @@species;

  static non_enumerable any all(any iterable);
  static non_enumerable any allSettled(any iterable);
  static non_enumerable any any(any iterable);
  static non_enumerable any race(any iterable);
  static non_enumerable any reject(any r);
  static non_enumerable any resolve(any x);
  static non_enumerable any try(any callback, any... args);
  static non_enumerable any withResolvers();

  non_enumerable any catch(any onRejected);
  non_enumerable any finally(any onFinally);
  non_enumerable any then(any onFulfilled, any onRejected);
};

// GeneratorFunction Objects
// https://tc39.es/ecma262/#sec-generatorfunction-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface GeneratorFunction : Function {
  [Length="1"]
  readonly constructor(any... parameterArgs /* , any bodyArg */);

  static property any name = "GeneratorFunction";

  instance property any length;
  instance property any name;
  instance non_configurable property any prototype;
};

// AsyncGeneratorFunction Objects
// https://tc39.es/ecma262/#sec-asyncgeneratorfunction-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AsyncGeneratorFunction : Function {
  [Length="1"]
  readonly constructor(any... parameterArgs /* , any bodyArg */);

  static property any name = "AsyncGeneratorFunction";

  instance readonly property any length;
  instance property any name;
  instance non_configurable property any prototype;
};

// The %GeneratorPrototype% Object
// https://tc39.es/ecma262/#sec-properties-of-generator-prototype
[NoBrandCheck]
prototype GeneratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Generator";

  non_enumerable any next(any value);
  non_enumerable any return(any value);
  non_enumerable any throw(any exception);
};

// The %AsyncGeneratorPrototype% Object
// https://tc39.es/ecma262/#sec-properties-of-asyncgenerator-prototype
[NoBrandCheck]
prototype AsyncGeneratorPrototype : AsyncIteratorPrototype {
  readonly property any @@toStringTag = "AsyncGenerator";

  non_enumerable any next(any value);
  non_enumerable any return(any value);
  non_enumerable any throw(any exception);
};

// AsyncFunction Objects
// https://tc39.es/ecma262/#sec-async-function-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface AsyncFunction : Function {
  [Length="1"]
  readonly constructor(any... parameterArgs /* , any bodyArg */);

  static property any name = "AsyncFunction";

  instance property any length;
  instance property any name;
};

// The Reflect Object
// https://tc39.es/ecma262/#sec-reflect-object
[Exposed=*]
namespace Reflect {
  non_enumerable any apply(any target, any thisArgument, any argumentsList);
  non_enumerable any construct(any target, any argumentsList, optional any newTarget);
  non_enumerable any defineProperty(any target, any propertyKey, any attributes);
  non_enumerable any deleteProperty(any target, any propertyKey);
  non_enumerable any get(any target, any propertyKey, optional any receiver);
  non_enumerable any getOwnPropertyDescriptor(any target, any propertyKey);
  non_enumerable any getPrototypeOf(any target);
  non_enumerable any has(any target, any propertyKey);
  non_enumerable any isExtensible(any target);
  non_enumerable any ownKeys(any target);
  non_enumerable any preventExtensions(any target);
  non_enumerable any set(any target, any propertyKey, any V, optional any receiver);
  non_enumerable any setPrototypeOf(any target, any proto);
};

// Proxy Objects
// https://tc39.es/ecma262/#sec-proxy-objects
[Exposed=*, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Proxy {
  constructor(any target, any handler);

  static non_enumerable any revocable(any target, any handler);
};

// Module Namespace Objects
// https://tc39.es/ecma262/#sec-module-namespace-objects
[NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ModuleNamespace {
  static readonly non_configurable property any @@toStringTag;
};

// ECMAScriptÂ® Internationalization API Specification
// https://tc39.es/ecma402/

// The Intl Object
// https://tc39.es/ecma402/#intl-object
[Exposed=*]
namespace Intl {
  non_enumerable any getCanonicalLocales(any locales);
  non_enumerable any supportedValuesOf(any key);
};

// Collator Objects
// https://tc39.es/ecma402/#collator-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Collator {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable readonly attribute any compare;

  non_enumerable any resolvedOptions();
};

// DateTimeFormat Objects
// https://tc39.es/ecma402/#datetimeformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DateTimeFormat {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable readonly attribute any format;

  non_enumerable any resolvedOptions();
  non_enumerable any formatRange(any startDate, any endDate);
  non_enumerable any formatRangeToParts(any startDate, any endDate);
  non_enumerable any formatToParts(any date);
};

// DisplayNames Objects
// https://tc39.es/ecma402/#intl-displaynames-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DisplayNames {
  constructor(any locales, any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any of(any code);
};

// DurationFormat Objects
// https://tc39.es/ecma402/#durationformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface DurationFormat {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any format(any duration);
  non_enumerable any formatToParts(any duration);
};

// ListFormat Objects
// https://tc39.es/ecma402/#listformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface ListFormat {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any format(any list);
  non_enumerable any formatToParts(any list);
};

// Locale Objects
// https://tc39.es/ecma402/#locale-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Locale {
  constructor(any tag, optional any options);

  non_enumerable readonly attribute any baseName;
  non_enumerable readonly attribute any calendar;
  non_enumerable readonly attribute any caseFirst;
  non_enumerable readonly attribute any collation;
  non_enumerable readonly attribute any hourCycle;
  non_enumerable readonly attribute any language;
  non_enumerable readonly attribute any numberingSystem;
  non_enumerable readonly attribute any numeric;
  non_enumerable readonly attribute any region;
  non_enumerable readonly attribute any script;

  non_enumerable any maximize();
  non_enumerable any minimize();
  non_enumerable any toString();
};

// NumberFormat Objects
// https://tc39.es/ecma402/#numberformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface NumberFormat {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable readonly attribute any format;

  non_enumerable any resolvedOptions();
  non_enumerable any formatRange(any start, any end);
  non_enumerable any formatRangeToParts(any start, any end);
  non_enumerable any formatToParts(any value);
};

// PluralRules Objects
// https://tc39.es/ecma402/#pluralrules-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface PluralRules {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any select(any value);
  non_enumerable any selectRange(any start, any end);
};

// RelativeTimeFormat Objects
// https://tc39.es/ecma402/#relativetimeformat-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface RelativeTimeFormat {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any format(any value, any unit);
  non_enumerable any formatToParts(any value, any unit);
};

// Segmenter Objects
// https://tc39.es/ecma402/#segmenter-objects
[LegacyNamespace=Intl, NoBrandCheck, NoNewTargetCheck, NoObjectCreation, NoUnforgeablesSlot]
interface Segmenter {
  constructor(optional any locales, optional any options);

  static non_enumerable any supportedLocalesOf(any locales, optional any options);

  non_enumerable any resolvedOptions();
  non_enumerable any segment(any string);
};

// The %IntlSegmentsPrototype% Object
// https://tc39.es/ecma402/#sec-%intlsegmentsprototype%-object
[NoBrandCheck]
prototype IntlSegmentsPrototype {
  non_enumerable any containing(any index);
  non_enumerable any @@iterator();
};

// The %IntlSegmentIteratorPrototype% Object
// https://tc39.es/ecma402/#sec-%intlsegmentiteratorprototype%-object
[NoBrandCheck]
prototype IntlSegmentIteratorPrototype : Iterator.prototype {
  readonly property any @@toStringTag = "Segmenter String Iterator";

  non_enumerable any next();
};
